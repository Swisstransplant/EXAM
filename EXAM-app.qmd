---
title: "EXAM"
author: "v1.2"
logo: images/SWT_2955_2021_border.png
format:
  dashboard:
    description-meta: "EXAM (ex-vivo allograft monitoring) is an analytics dashboard for the hypothermic machine perfusion data in deceased-donor kidney transplantation."
    nav-buttons:
      - icon: github
        href: https://github.com/Swisstransplant/EXAM
    link-external-icon: true
    link-external-newwindow: true
    theme: 
      - swt.scss
    fontsize: 0.95em
    linestretch: 1.2
server: shiny
include-in-header:
  file: header.js
---

```{r}
#| context: setup
#| warning: false
#| message: false

library(fs) # MIT
library(shiny) # GPL-3
suppressPackageStartupMessages(library(plotly)) # MIT
library(swt) # GPL-3
# Quarto MIT

# SWT colors
col = swt_colors()

# load internal example data from package swt
data("exam-examples")

# load swt data instead and overwrite example variables
# PATH_DATA    = file.path(path_home(), "OneDrive - Swisstransplant", "Projects", "EXAM", "data")
# load(file.path(PATH_DATA, "exam.RData"))
# 
# exam.device     = data.device
# exam.organ      = data.organ
# exam.sumstats   = data.sumstats
# exam.timeseries = data.timeseries

# helper functions for plotly
hline <- function(y = 0, color = "grey", type="dash") {
  list(
    type = "line", 
    x0 = 0, 
    x1 = 1, 
    xref = "paper",
    y0 = y, 
    y1 = y, 
    line = list(color = color, dash=type)
  )
}

vline <- function(x = 0, color = "grey", type="dash") {
  list(
    type = "line",
    y0 = 0,
    y1 = 1,
    yref = "paper",
    x0 = x,
    x1 = x,
    line = list(color = color, dash=type)
  )
}
```

# {.sidebar}

```{r}

selectInput(inputId = "ID", label = "Select example dataset:",
            choices = sort(exam.organ$ID, decreasing = TRUE))

fileInput(inputId = "file1", label = "Upload LifePort data file:",
          multiple = FALSE,
          accept = c("text/csv",
                     "text/comma-separated-values,text/plain",
                     ".csv"))
```

::: {.callout-note appearance="simple" collapse="true"}
## Terms of use
By accessing or using this program, you agree to the terms of the [GNU Affero General Public License](https://www.gnu.org/licenses/agpl-3.0.html) and the following supplements to its sections 15 and 16:

* The program is provided "as is" without warranty or any obligation from Swisstransplant;
* Swisstransplant excludes liability for damages, losses, or claims arising from program use, to the extent permitted by law; and
* You are solely responsible for evaluating the programâ€™s functionality, suitability, and safety before use.

This dashboard uses Google Analytics to analyze visitor traffic. To protect your privacy, we have enabled IP anonymization, which means your IP address is partially masked before being stored. Google Analytics helps us improve our dashboard, but you can opt out by adjusting your browser settings or using Google's opt-out tool.

Copyright (C) 2023--2025 Swisstransplant
:::

::: {.callout-important appearance="simple" collapse="false"}
## Important
Hypothermic machine perfusion data should not be used as a basis for discarding a kidney allograft.

Please refrain from uploading personal, sensitive, or patient-identifiable data. All uploaded data is temporary and will be automatically deleted at the end of the session. The developers assume no liability for any misuse of the application or the data provided by users.
:::
---

# Kidney LifePort Dashboard

## Row {height="13%"}

```{r}
#| title: Organ and Device Information
tableOutput('Tab_info')
```

## Row {.flow height="37%"}

::: {.card title="Pressure" padding="16px"}

```{r}
plotlyOutput('Fig1', height = "300px")
tableOutput('Tab1')
```
:::

::: {.card title="Flow Rate"}

```{r}
plotlyOutput('Fig2', height = "300px")
tableOutput('Tab2')
```
:::

## Row {height="37%"}

::: {.card title="Vascular Resistance"}

```{r}
plotlyOutput('Fig3', height = "300px")
tableOutput('Tab3')
```
:::

::: {.card title="Temperature"}

```{r}
plotlyOutput('Fig4', height = "300px")
tableOutput('Tab4')
```
:::

## Row {height="13%"}

```{r}
#| title: Quality Control
tableOutput('Tab_qual')
```

# Indicators

| Class                  | Indicator   | Meaning                  | Unit            |
|------------------------|:------------|:-------------------------|:----------------|
| Perfusion indicators   | $md_{sys}$  | median systolic pressure | mmHg            |
|                        | $m_{dia}$   | mean diastolic pressure  | mmHg            |
|                        | $m_{flow}$  | mean flow rate           | ml/min          |
|                        | $m_{res}$   | mean vascular resistance | mmHg/ml/min     |
|                        | $SD_{res}$  | std. dev. of  resistance | mmHg/ml/min     |
|                        | $\Delta_{res}$ | drop in resistance within first 60 min  | mmHg/ml/min    |
|                        | $\beta_{res}$  | drop in resistance per Minute           | mmHg/ml/min$^2$|
| Temperature indicators | $m_{ice}$          | mean ice temperature                | $\textdegree$C |
|                        | $SD_{ice}$         | std. dev. of ice temperature        | $\textdegree$C |
|                        | $y_{\text{start}}$ | perfusate temperature at start      | $\textdegree$C |
|                        | $m_{perf}$           | mean perfusate temperature        | $\textdegree$C |
|                        | $SD_{perf}$          | std. dev. of perfusate temperature| $\textdegree$C |
|                        | $\Delta t_{ice>3}$   | duration ice temp. above 3$\textdegree$C    | MM:HH:SS |
|                        | $\Delta t_{perf>10}$ | duration perf. temp. above 10$\textdegree$C | MM:HH:SS |
| Quality control        | $D^2_{perf}$     | Distance of the case from other cases with respect to perfusion indicators (a lower score is better). It can be seen as the deviation from the norm. | *unitless* |
|                        | $P_{perf}$       | Percentile rank of $D^2_{perf}$. For example, a score of 0.90 means that 90% of the cases had a better result (thus, a lower score is better).  | % |
|                        | $D^2_{temp}$     | Distance of the case from other cases with respect to temperature indicators (a lower score is better). It can be seen as the deviation from the norm. | *unitless* |
|                        | $P_{temp}$       | Percentile rank of $D^2_{temp}$. For example, a score of 0.90 means that 90% of the cases had a better result (thus, a lower score is better).  | % |

# About

::: {.card}

## About

EXAM (ex-vivo allograft monitoring) is a dashboard for analyzing hypothermic machine perfusion data from the [ORS LifePort Kidney Transporter](https://www.organ-recovery.com/lifeport-kidney-transporter/). EXAM is free software written in the R programming language.

## Contact
For inquiries about EXAM, please get in touch with Simon Schwab <simon.schwab@swisstransplant.org>.

## References

Schwab S, Steck H, Binet I, et al. EXAM: Ex-vivo allograft monitoring dashboard for the analysis of hypothermic machine perfusion data in deceased-donor kidney transplantation. *PLOS Digit Health*. 2024;3(12):e0000691. [doi:10.1371/journal.pdig.0000691](https://doi.org/10.1371/journal.pdig.0000691)

Schwab S. EXAM: Ex-vivo allograft monitoring dashboard. Github; 2025. Accessed February 13, 2025. <https://github.com/Swisstransplant/EXAM>

Schwab S. swt: Swisstransplant R Package. Github; 2024. Accessed February 13, 2025. <https://github.com/Swisstransplant/swt>

## Acknowledgments

EXAM was developed by Swisstransplant in collaboration with three Swiss transplant centers.

::: {{layout-ncol=4}}

![Surus](images/SWT_2955_2021.png){height=80 style="float:left; padding:16px"}
![Surus](images/HUG.png){height=80 style="float:left; padding:16px"}
![Surus](images/Insel.png){height=80 style="float:left; padding:16px"}
![Surus](images/KSSG.png){height=80 style="padding:16px"}

:::

:::

```{r}
#| context: server

# I need reactive value because the dataset can either be from 
# 1) the internal data or
# 2) the file upload
dataset = reactiveVal()

# 1) select dataset from internal example data from package swt
observeEvent(input$ID, {
  i = which(exam.organ$ID == input$ID)
  # I create a data list from the internal data
  dataset(list(data.device = exam.device[i,],
               data.organ = exam.organ[i,],
               data = exam.timeseries[[i]],
               data.sumstats = exam.sumstats[i,]))
})

# 2) read data from file upload
observeEvent(input$file1, {
  
  # read data, processing and sumstats
  
  # error handling when damaged lifeport data file is uploaded
  lp_data = tryCatch({
    
    lp_data = lifeport_read(file = input$file1$datapath, format = "guess")
    lp_data = lifeport_process(lp_data)
    lp_data = lifeport_sumstats(lp_data)
    lp_data$data.organ$ID = gsub("\\.txt$|\\.TXT$", "", basename(input$file1$name))
    
    # Calculate quality indicator
    # subset variables: 7 dimensions
    tmp.perf = subset(lp_data$data.sumstats, select = c("systolicPressure.md",
                                                        "diastolicPressure.mean",
                                                        "flowRate.mean",
                                                        "organResistance.mean",
                                                        "organResistance.sd"))
    
    tmp.temp = subset(lp_data$data.sumstats, select = c("iceContainerTemperature.mean",
                                                        "iceContainerTemperature.sd",
                                                        "infuseTemperature.start",
                                                        "infuseTemperature.mean",
                                                        "infuseTemperature.sd"))
    
    # calculate D^2
    stats = lifeport_d2(data = tmp.perf, type = "perf")
    lp_data$data.sumstats$D2perf = stats$d2
    lp_data$data.sumstats$Pperf = stats$rank
    
    stats = lifeport_d2(data = tmp.temp, type = "temp")
    lp_data$data.sumstats$D2temp = stats$d2
    lp_data$data.sumstats$Ptemp  = stats$rank
    
    dataset(lp_data)
    
  }, error = function(e) {
    
    showModal(modalDialog(
      title = "Error reading file",
      "The file does not contain valid LifePort data. Maybe you selected the wrong file or the file has been damaged.",
      easyClose = FALSE
    ))
    
  })
  
})

# Figure 1: Pressure Chart
output$Fig1 <- renderPlotly({
  
  # lst = lp_data # for debugging
  lst = dataset() # data is a list
  
  # converting from wide to long
  d = data.frame(pressure = c(lst$data$SystolicPressure.flt, 
                              lst$data$DiastolicPressure.flt),
                 time.clock = c(lst$data$time.clock, 
                                lst$data$time.clock),
                 group = c(rep("systolic pressure", nrow(lst$data)), 
                           rep("diastolic pressure", nrow(lst$data))))
  d$group = factor(d$group, levels = c("systolic pressure", "diastolic pressure"))
  
  # figure
  fig = plot_ly(d, x=~time.clock, y=~pressure, type="scatter", mode="lines", 
                color=~group, colors = c(col$blue.swt, col$darkyellow.kidney))
  fig = fig %>% layout(yaxis = list(title = "mmHg", range = c(0, 45)),
                       xaxis = list(title = "Time"),
                       legend = list(orientation = 'h',  yanchor = "bottom",  
                                     y = 1.02, x = 1, xanchor = "right"),
                       shapes = list(hline(20), hline(30))
  )
  
})

# Figure 2: Flow Rate Chart
output$Fig2 <- renderPlotly({
  
  # lst = lp_data # for debugging
  lst = dataset() # data is a list
  d = lst$data
  
  # handle timeseries shorter than 30 min.
  if(length(d$time.clock) >= 181) {
    t_30 =  d$time.clock[181]
  } else {
    t_30 = d$time.clock[length(d$time.clock)]
  }
  
  # figure
  fig = plot_ly(d, x=~time.clock, y=~FlowRate.flt, type="scatter", mode="lines", 
                color="all", colors = col$blue.swt)
  fig = fig %>% layout(yaxis = list(title = "ml/min", range = c(0, 200)),
                       xaxis = list(title = "Time"),
                       shapes = list(hline(100),
                                     vline(t_30, type="dot"))
  )
  
})

# Figure 3: Flow Rate Chart
output$Fig3 <- renderPlotly({
  
  # lst = lp_data # for debugging
  lst = dataset() # data is a list
  d = lst$data
  s = lst$data.sumstats
  
  # handle timeseries shorter than 30 min.
  if(length(d$time.clock) >= 181) {
    t_30 =  d$time.clock[181]
  } else {
    t_30 = d$time.clock[length(d$time.clock)]
  }
  
  # figure
  fig = plot_ly(d, x=~time.clock, y=~OrganResistance.flt, type="scatter", mode="lines", 
                color="all", colors = col$blue.swt, name = "vascular resistance")
  
  # don't show slope when there are no x1, y1 and x2, y2 values
  if (!is.na(s$organResistance.x1) & !is.na(s$organResistance.y1) & 
      !is.na(s$organResistance.x1) & !is.na(s$organResistance.y1) ) { 
    fig = fig %>% add_trace(x = c(d$time.clock[s$organResistance.x1], 
                                  d$time.clock[s$organResistance.x2]),
                            y = c(s$organResistance.y1, s$organResistance.y2), 
                            mode = "markers+lines", color = I(col$strongred.akzent), name = "slope")
  }
  
  fig = fig %>% layout(yaxis = list(title = "mmHg/ml/min", range = c(0, 0.5)),
                       xaxis = list(title = "Time"),
                       legend = list(orientation = 'h',  yanchor = "bottom",  
                                     y = 1.02, x = 1, xanchor = "right"),
                       shapes = list(hline(0.10), 
                                     hline(0.30),
                                     vline(t_30, type="dot")
                       )
  )
  
})

# Figure 4: Temperature Chart
output$Fig4 <- renderPlotly({
  
  HIGH_INF_TEMP = 10
  HIGH_ICE_TEMP = 3.0
  
  lst = dataset() # data is a list
  
  # prepare time series of ice and perf temp too high
  is_high_perf = lst$data$InfuseTemperature > HIGH_INF_TEMP &
    lst$data$FlowRate.flt > 5 & !is.na(lst$data$FlowRate.flt)
  high_perf = lst$data$InfuseTemperature
  high_perf[!is_high_perf] = NA
  
  is_high_ice = lst$data$IceContainerTemperature > HIGH_ICE_TEMP
  high_ice = lst$data$IceContainerTemperature
  high_ice[!is_high_ice] = NA
  
  # converting from wide to long
  d = data.frame(temperature = c(lst$data$IceContainerTemperature, 
                                 lst$data$InfuseTemperature,
                                 high_perf,
                                 high_ice),
                 time.clock = rep(lst$data$time.clock, 4),
                 group = c(rep("ice temperature", nrow(lst$data)), 
                           rep("perfusate temperature", nrow(lst$data)),
                           rep("high temperature", nrow(lst$data)),
                           rep("high temperature", nrow(lst$data))
                 ))
  d$group = factor(d$group, levels = c("ice temperature", 
                                       "perfusate temperature",
                                       "high temperature"))
  
  # figure
  fig = plot_ly(d, x=~time.clock, y=~temperature, type="scatter", mode="lines", 
                color=~group, colors = c(col$blue.swt, 
                                         col$darkyellow.kidney,
                                         col$strongred.akzent))
  fig = fig %>% layout(yaxis = list(title = "Degrees Celsius", range = c(0, 20)),
                       xaxis = list(title = "Time"),
                       legend = list(orientation = 'h',  yanchor = "bottom",  
                                     y = 1.02, x = 1, xanchor = "right"),
                       shapes = list(hline(5), hline(10))
  )
  
})

# Info table
output$Tab_info <- renderTable({
  lst = dataset()
  tab = cbind(lst$data.organ[, "ID"],
              lst$data.device[, c("SerialNumber", "UnitID", "StartTime", 
                                  "StopTime", "Runtime")],
              lst$data.sumstats[, "perfusion.dur.str"]
  )
  colnames(tab) = c("File ID", "Serial no.", "Unit ID", 
                    "Start time", "Stop time", "Run time", "Perfusion time")
  tab
})

# Tables with Summary statistics
output$Tab1 <- renderTable({
  lst = dataset()
  tab = lst$data.sumstats[, c("systolicPressure.md", "diastolicPressure.mean")] 
  colnames(tab) = c("<i>md</i><sub>sys</sub>", "<i>m</i><sub>dia</sub>")
  tab
}, sanitize.text.function = function(x) x) # needed for formatting special characters

output$Tab2 <- renderTable({
  lst = dataset()
  tab = lst$data.sumstats[, "flowRate.mean", drop = FALSE] 
  colnames(tab) = c("<i>m</i><sub>flow</sub>")
  tab
}, sanitize.text.function = function(x) x) # needed for formatting special characters

output$Tab3 <- renderTable({
  lst = dataset()
  tab = lst$data.sumstats[, c("organResistance.mean", "organResistance.sd",
                              "organResistance.delta","organResistance.slope"), drop = FALSE] 
  colnames(tab) = c("<i>m</i><sub>res</sub>", "<i>SD</i><sub>res</sub>",
                    "<i>&#916</i><sub>res</sub>", "<i>&#946</i><sub>res</sub>")
  tab
}, sanitize.text.function = function(x) x) # needed for formatting special characters

output$Tab4 <- renderTable({
  lst = dataset()
  tab = lst$data.sumstats[, c("iceContainerTemperature.mean","iceContainerTemperature.sd",
                              "iceContainerTemperature.minAbove.str", "infuseTemperature.start",
                              "infuseTemperature.mean", "infuseTemperature.sd",
                              "infuseTemperature.minAbove.str")]
  colnames(tab) = c("<i>m</i><sub>ice</sub>", "<i>SD</i><sub>ice</sub>", 
                    "<i>&#916t</i><sub>y>3</sub>", "<i>y</i><sub>start</sub>",
                    "<i>m</i><sub>perf</sub>", "<i>SD</i><sub>perf</sub>", 
                    "<i>&#916t</i><sub>y>10</sub>")
  tab
}, sanitize.text.function = function(x) x) # needed for formatting special characters

# Table Quality Control
output$Tab_qual <- renderTable({
  lst = dataset()
  tab = cbind(
    lst$data.organ[, c("OrganID", "KidneySide")],
    lst$data.sumstats[, c("D2perf", "Pperf", "D2temp", "Ptemp")]
  )
  tab$Pperf = sprintf("%.0f%%", tab$Pperf*100)
  tab$Ptemp = sprintf("%.0f%%", tab$Ptemp*100)
  colnames(tab) = c("Organ ID entry", "Kidney side entry",
                    "<i>D</i><sup>2</sup><sub>perf</sub>",
                    "<i>P</i><sub>perf</sub>",
                    "<i>D</i><sup>2</sup><sub>temp</sub>",
                    "<i>P</i><sub>temp</sub>")
  
  tab
}, sanitize.text.function = function(x) x) # needed for formatting special characters
```
